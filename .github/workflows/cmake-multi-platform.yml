# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        # os: [ubuntu-latest, windows-latest]
        os: [ubuntu-latest]
        build_type: [Release, Release-RU]
        # c_compiler: [gcc, clang, cl]
        c_compiler: [gcc, clang]
        include:
          # - os: windows-latest
          #   c_compiler: cl
          #   cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        # exclude:
        #   - os: windows-latest
        #     c_compiler: gcc
        #   - os: windows-latest
        #     c_compiler: clang
        #   - os: ubuntu-latest
        #     c_compiler: cl

    steps:
    - name: Install gcc 13
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo add-apt-repository --update -y ppa:ubuntu-toolchain-r/test
        sudo apt-get update -y
        sudo apt-get -y --fix-broken install gcc-13 g++-13
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 13 --slave /usr/bin/g++ g++ /usr/bin/g++-13 --slave /usr/bin/gcov gcov /usr/bin/gcov-13

    - name: Remove existing clang installations
      if: startsWith(matrix.c_compiler, 'clang')
      run: |
        sudo apt remove clang clang-14 clang-15
        sudo apt autoremove

    - name: Install clang 17
      if: startsWith(matrix.c_compiler, 'clang')
      run: |
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
        echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main" | sudo tee /etc/apt/sources.list.d/clang.list
        sudo apt-get update
        sudo apt-get install clang-17
        sudo ln -sf /usr/bin/clang-17 /usr/bin/clang
        sudo ln -sf /usr/bin/clang++-17 /usr/bin/clang++

    - name: Checkout repository
    - uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Install dependencies (linux)
      if: startsWith(matrix.os, 'ubuntu')
      run: sudo apt-get -y update && sudo apt-get -y install libssl-dev libopencv-dev libboost-dev libcurl4-openssl-dev libboost-program-options-dev libtbb-dev

    # - uses: ilammy/msvc-dev-cmd@v1
    #   with:
    #     arch: ${{ matrix.arch }}

    # - name: Install Boost (windows)
    #   if: startsWith(matrix.os, 'windows')
    #   uses: MarkusJx/install-boost@v2.4.4
    #   with:
    #     boost_version: 1.83.0
    #     boost_install_dir: ${{ github.workspace }}/3rdparty

    # - name: Move boost
    #  if: startsWith(matrix.os, 'windows')
    #  run: |
    #    mv ${{ github.workspace }}/3rdparty/boost/boost ${{ github.workspace }}/3rdparty/boost_tmp
    #    rm ${{ github.workspace }}/3rdparty/boost
    #    mv ${{ github.workspace }}/3rdparty/boost_tmp ${{ github.workspace }}/3rdparty/boost
        
    # - name: Check boost
    #   if: startsWith(matrix.os, 'windows')
    #   run: |
    #     dir ${{ github.workspace }}/3rdparty/boost
    #     dir ${{ github.workspace }}/3rdparty/boost/boost
        
    # - name: Install OpenSSL (windows)
    #   if: startsWith(matrix.os, 'windows')
    #   run: |
    #     git clone https://github.com/openssl/openssl.git ${{ github.workspace }}/3rdparty/openssl
    #     cd ${{ github.workspace }}/3rdparty/openssl
    #     perl Configure no-asm no-shared
    #     nmake.exe -f makefile

    # - name: Free some space after OpenSSL compilation (windows)
    #  if: startsWith(matrix.os, 'windows')
    #  run: |
    #    rm ${{ github.workspace }}/3rdparty/openssl/test -Recurse -Force

    # - name: Install curl (windows)
    #   if: startsWith(matrix.os, 'windows')
    #   run: |
    #     git clone https://github.com/curl/curl.git ${{ github.workspace }}/3rdparty/curl
    #     mkdir ${{ github.workspace }}/3rdparty/curl/build
    #     cmake -B ${{ github.workspace }}/3rdparty/curl/build -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }}/3rdparty/curl
    #     cmake --build ${{ github.workspace }}/3rdparty/curl/build --config ${{ matrix.build_type }}
        
    # - name: Install zlib (windows)
    #   if: startsWith(matrix.os, 'windows')
    #   run: |
    #     git clone https://github.com/madler/zlib.git ${{ github.workspace }}/3rdparty/zlib
    #     mkdir ${{ github.workspace }}/3rdparty/zlib/build
    #     cmake -B ${{ github.workspace }}/3rdparty/zlib/build -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }}/3rdparty/zlib
    #     cmake --build ${{ github.workspace }}/3rdparty/zlib/build --config ${{ matrix.build_type }}

    # Do not clone manually - cloned with --recurse-submodules
    # - name: Clone nlohmann-json
    #   run: git clone https://github.com/nlohmann/json.git ${{ github.workspace }}/3rdparty/json

    # Do not clone manually - cloned with --recurse-submodules
    # - name: Clone tgbot-cpp
    #   run: git clone https://github.com/reo7sp/tgbot-cpp.git ${{ github.workspace }}/3rdparty/tgbot-cpp

    - name: Fix tgbot-cpp modern Boost lib compatibility
      run:
        sed -i 's/COMPONENTS system //' ${{ github.workspace }}/3rdparty/tgbot-cpp/CMakeLists.txt
        
    - name: Compile tgbot-cpp (linux)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        mkdir ${{ github.workspace }}/3rdparty/tgbot-cpp/build
        cmake -B ${{ github.workspace }}/3rdparty/tgbot-cpp/build -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }}/3rdparty/tgbot-cpp
        cmake --build ${{ github.workspace }}/3rdparty/tgbot-cpp/build --config ${{ matrix.build_type }}

    # - name: Compile tgbot-cpp (windows)
    #   if: startsWith(matrix.os, 'windows')
    #   run: |
    #     mkdir ${{ github.workspace }}/3rdparty/tgbot-cpp/build
    #     cmake -B ${{ github.workspace }}/3rdparty/tgbot-cpp/build -DZLIB_INCLUDE_DIR=${{ github.workspace }}/3rdparty/zlib/ -DZLIB_LIBRARY=${{ github.workspace }}/3rdparty/zlib/build/Release/zlib.lib -DOPENSSL_ROOT_DIR=${{ github.workspace }}/3rdparty/openssl/ -DBoost_INCLUDE_DIR=${{ github.workspace }}\3rdparty\boost\boost\ -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }}/3rdparty/tgbot-cpp
    #     cmake --build ${{ github.workspace }}/3rdparty/tgbot-cpp/build --config ${{ matrix.build_type }}

    # - name: Install opencv (windows)
    #   if: startsWith(matrix.os, 'windows')
    #   run: |
    #     git clone https://github.com/opencv/opencv.git ${{ github.workspace }}/3rdparty/opencv
    #     mkdir ${{ github.workspace }}/3rdparty/opencv/build
    #     cmake -B ${{ github.workspace }}/3rdparty/opencv/build -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }}/3rdparty/opencv
    #     cmake --build ${{ github.workspace }}/3rdparty/opencv/build --config ${{ matrix.build_type }}
     
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
      env:
        Lang_RU: False

    - name: Set translation variable
      if: endsWith(matrix.build_type, 'RU')
      env:
        Lang_RU: True
      run: |
        echo "Use Lang_RU = True"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DLANG_RU=$Lang_RU
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
